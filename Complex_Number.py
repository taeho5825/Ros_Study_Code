"""autogenerated by genpy from basis/Complex.msg. Do not edit"""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

class Complex(genpy.Message):
    _md5Sum = "54da470dccf15d60bd273ab751e1c0a1"
    _type = "basics/Complex"
    _has_header = False #flag to mark the presence of a Header object
    _full_text = """float32 real
float32 imaginary
"""
    __slots__=['real','imaginary']
    _slot_types = ['float32','float32']

def __init__(self, *args, **kwds):
    """
    Constructor. Any message fileds that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes. You cannot mix in-order arguments and keyword arguments.
    
    The available fileds are:
        real, imaginary
    
    :param args:complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """

    if args or kwds:
        super(Complex, self).__init__(*args, **kwds)
        #message fields cannot be None, assign default values for those that are
        if self.real is None:
            self.real = 0.
        if self.imaginary is None:
            self.imaginary = 0.
    else:
        self.real = 0.
        self.imaginary = 0.

def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

def serialize(self, buff):
    ...

def deserialize(self, str):
    ...

def serialize_numpy(self, buff, numpy):
    ...

def deserialize_numpy(self, str, numpy):
    ...
